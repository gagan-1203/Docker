name: 1. Application Build and Security Gate

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Grant necessary permissions for security reporting
permissions:
  contents: read
  security-events: write 
  actions: read

jobs:
  # 1. SAST (CodeQL) - Runs on the source code immediately
  sast_scan:
    name: CodeQL (SAST)
    uses: ./.github/workflows/reusable-codeql.yml # Calls the reusable CodeQL workflow
    secrets: inherit # Pass environment secrets

  # 2. Build Image - Runs after SAST, required for the image scanners
  build_image:
    name: Build Container
    needs: sast_scan
    runs-on: ubuntu-latest
    outputs:
      image_name_tag: ${{ steps.build.outputs.image_name_tag }}

    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub (or your registry)
        # Assuming you will push to a registry for later steps/deployments
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Image Tag
        id: set_tag
        run: echo "IMAGE_TAG=my-app:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and Load Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Push the built image to the registry for the next job to pull
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ steps.set_tag.outputs.IMAGE_TAG }}
          outputs: |
            image_name_tag=${{ secrets.DOCKER_USERNAME }}/${{ steps.set_tag.outputs.IMAGE_TAG }}
            
  # 3. Image Scanning - Runs in parallel with other tests/deployments (if any)
  image_scans:
    name: Image Security Scanners
    needs: build_image
    uses: ./.github/workflows/reusable-image-scans.yml # Calls the reusable scanning workflow
    with:
      image_name_tag: ${{ needs.build_image.outputs.image_name_tag }}
    secrets: inherit # Pass environment secrets (SNYK_TOKEN, etc.)
