name: Security Scan - Grype (SCA)

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  grype_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # Required for Upload SARIF

    steps:
      # 1. CHECKOUT CODE
      - name: 1. Checkout repository
        uses: actions/checkout@v4
        
      # 2. CACHE RESTORATION
      - name: 2. Cache Syft and Grype Binaries
        uses: actions/cache@v3
        id: cache-tools
        with:
          path: /usr/local/bin/syft /usr/local/bin/grype
          key: ${{ runner.os }}-grype-syft-v1-${{ hashFiles('.github/workflows/security_scan.yml') }}
          restore-keys: |
            ${{ runner.os }}-grype-syft-v1-

      # 3. TOOL INSTALLATION (CONDITIONAL)
      - name: 3. Setup Anchore CLI Tools (Syft & Grype)
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss: Installing Syft and Grype from scratch."
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
          
      # 4. GENERATE SBOM (PREREQUISITE FOR SCANNING)
      - name: 4. Generate SBOM (Artifact Storage)
        uses: anchore/sbom-action@v0
        if: always()
        id: sbom_gen
        with:
          format: cyclonedx-json
          output-file: sbom.json
        
      # 5. VULNERABILITY SCAN & GATE (CORE POLICY ENFORCEMENT)
      - name: 5. Scan Project for Vulnerabilities (Generate SARIF)
        uses: anchore/scan-action@v3 
        id: scan
        with:
          path: .
          fail-build: true
          severity-cutoff: high 
          output-format: sarif
          
      # 6. UPLOAD SARIF (IMMEDIATE FEEDBACK)
      - name: 6. Upload SARIF results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Run even if step 5 failed
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          
      # 7. DISPLAY SEVERITY (LOG FEEDBACK)
      - name: 7. Display Vulnerability Scan Results (Severity Table)
        if: always() # Run even if step 5 failed
        run: |
          echo "--- Starting Vulnerability Scan Summary (Grype) ---"
          # Final corrected command to output the table
          /usr/local/bin/grype sbom:./sbom.json -o table
          echo "--- Vulnerability Scan Complete ---"
