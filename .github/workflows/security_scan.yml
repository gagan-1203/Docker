name: Security Scan - Grype (SCA)

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  grype_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # --- STEP 1: RESTORE CACHE (Check if tools are already installed) ---
      - name: Cache Syft and Grype Binaries
        uses: actions/cache@v3
        id: cache-tools
        with:
          # Define the paths to cache (where we install the tools)
          path: /usr/local/bin/syft /usr/local/bin/grype
          # Create a unique cache key based on OS and the workflow file hash
          key: ${{ runner.os }}-grype-syft-v1-${{ hashFiles('.github/workflows/security_scan.yml') }}
          # Fallback keys to use if the primary key isn't found
          restore-keys: |
            ${{ runner.os }}-grype-syft-v1-

      # --- STEP 2: SETUP TOOLS (Conditional Installation) ---
      # This step only runs if the cache was NOT found (cache-hit != 'true').
      - name: Setup Anchore CLI Tools (Syft & Grype)
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss: Installing Syft and Grype from scratch."
          # Install Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
          # Install Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
          
      # --- SBOM GENERATION (Policy Artifact) ---
      - name: Generate SBOM (Artifact Storage)
        uses: anchore/sbom-action@v0
        if: always()
        id: sbom_gen
        with:
          format: cyclonedx-json
          output-file: sbom.json

      # --- DISPLAY SBOM (Now uses cached 'syft' command) ---
      - name: Display SBOM Summary (Human Readable)
        if: always()
        run: syft convert ./sbom.json -o syft-table
        
      # --- VULNERABILITY SCAN & GATE (Policy Enforcement) ---
      - name: Scan Project for Vulnerabilities (Generate SARIF)
        uses: anchore/scan-action@v3 
        id: scan
        with:
          path: .
          fail-build: true
          severity-cutoff: high 
          output-format: sarif
          
      - name: Upload SARIF results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          
      # --- DISPLAY SEVERITY (Now uses cached 'grype' command) ---
      - name: Display Vulnerability Scan Results (Severity Table)
        if: always() 
        run: grype sbom:./sbom.json
