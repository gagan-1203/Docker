name: Security Scan - Trivy (SCA/Container/FS)

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  trivy_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # Allows upload-sarif to write results

    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4
        
      # NOTE: Trivy is used as an action, so manual caching of the tool is often not required, 
      # but caching the Trivy DB is still a major optimization.
      # You can adapt the earlier caching strategy for the Trivy DB: ~/.trivycache/

      - name: 2. Scan Codebase, Configs, and Dependencies with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          # Targets the local filesystem (code/deps/config) and outputs SARIF
          scan-type: 'fs'
          # Set the severity gate (similar to Grype's 'severity-cutoff')
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
          # Fail the build if the severity cutoff is breached
          exit-code: '1'
          
      - name: 3. Upload SARIF results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          # Use the SARIF file generated by Trivy
          sarif_file: 'trivy-results.sarif'

      # If you were scanning a container image (e.g., after a build step):
      # - name: 4. Scan Container Image with Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'your-docker-registry/your-image:latest'
      #     format: 'table'
      #     severity: 'HIGH,CRITICAL'
      
  codeql_analysis:
    runs-on: ubuntu-latest
    # Requires security-events permission to upload its own SARIF results
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Initialize CodeQL (Sets up the scanning environment)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript # Replace with your project's language (e.g., java, python, go)

      # 2. Autobuild (For compiled languages like Java/Go, this builds the code)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # 3. Perform Analysis (Runs the actual SAST queries)
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
