name: Reusable Container Image Security Scans

on:
  workflow_call:
    secrets:
      SNYK_TOKEN:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  # 1. PULL IMAGE ONCE AND SAVE AS ARTIFACT
  prepare_image:
    name: Prepare Image Artifact
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
      IMAGE_TAR_NAME: image.tar

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Built Image
        # The image is pulled and loaded into the runner's Docker daemon
        run: docker pull "$IMAGE"

      - name: Save Image to Tar for Artifact
        # Save the pulled image to a local .tar file
        run: docker save "$IMAGE" -o "$IMAGE_TAR_NAME"

      - name: Upload Image Artifact
        # Upload the .tar file so other jobs can access it
        uses: actions/upload-artifact@v4
        with:
          name: container-image
          path: ${{ env.IMAGE_TAR_NAME }}

  # 2. TRIVY SCAN JOB (uses artifact)
  trivy_scan:
    name: Trivy Scan
    needs: prepare_image
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
      IMAGE_TAR_NAME: image.tar

    steps:
      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: container-image

      - name: Load Image from Tar
        # Load the image back into the runner's Docker daemon
        run: docker load -i "$IMAGE_TAR_NAME"

      # --- Trivy Scan ---
      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE }}
          format: sarif
          output: trivy-results.sarif
          scanners: vuln,misconfig,secret
          severity: CRITICAL,HIGH
          exit-code: "0"

      - name: Upload Trivy Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # 3. GRYPE SCAN JOB (uses artifact)
  grype_scan:
    name: Grype Scan
    needs: prepare_image
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
      IMAGE_TAR_NAME: image.tar

    steps:
      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: container-image

      - name: Load Image from Tar
        run: docker load -i "$IMAGE_TAR_NAME"

      # --- Grype Scan ---
      - name: Grype Image Scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.IMAGE }}
          severity-cutoff: high
          fail-build: true

  # 4. SNYK SCAN JOB (uses artifact, includes fix)
  snyk_scan:
    name: Snyk Scan
    needs: prepare_image
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
      IMAGE_TAR_NAME: image.tar

    steps:
      - uses: actions/checkout@v4 # Required to access the Dockerfile path in the repository
        
      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: container-image

      - name: Load Image from Tar
        run: docker load -i "$IMAGE_TAR_NAME"

      # --- Snyk Scan (Docker action) ---
      - name: Snyk Container Scan
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE }}
          args: --severity-threshold=high --file=./first-container/Dockerfile
          sarif: true # FIX: This setting tells the Snyk action to generate the snyk.sarif file
      
      - name: Upload Snyk Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
